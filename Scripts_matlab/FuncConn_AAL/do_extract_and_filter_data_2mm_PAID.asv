
clc; clear;
run('../start.m');

studydir = '/Volumes/X9Pro/NODEAP';
MRIdir = fullfile(studydir,'MRI');
SubIDlist = dir(fullfile(MRIdir, 'NODEAP*'));
SubIDlist = SubIDlist([SubIDlist.isdir]); % only keep directories
nSubIDlist = length(SubIDlist);

rest_names = {'D0','S1D1','S1D2','S2D1','S2D2','S3D1','S3D2'};
n_rest_names = length(rest_names);

userHome = getenv('HOME');
HomeDir = fullfile(userHome,'NODEAP_scripts');

maskpath = fullfile(HomeDir,'Scripts_matlab/FuncConn_AAL/masks');
MRIcount = readtable('/Volumes/X9Pro/NODEAP/MRI_func_count.xlsx',"ReadRowNames",true);

%% load masks & find indexes
% gm, wm, csf all in 2mm space
gm_idx  = find(spm_read_vols(spm_vol(fullfile(maskpath, 'gm_0.1_2mm.nii')))  > 0);
nvox = length(gm_idx);

wm_nii = fullfile(maskpath,'wm_0.9_2mm.nii'); % white matter mask
wm_dat = spm_read_vols(spm_vol(wm_nii));
wm_idx = find(wm_dat > 0);

csf_nii = fullfile(maskpath,'csf_0.9_2mm.nii'); % CSF mask
csf_dat = spm_read_vols(spm_vol(csf_nii));
csf_idx = find(csf_dat > 0);

%%

for subj = 1:nSubIDlist
    SubID = SubIDlist(subj).name;
    SubDir = fullfile(MRIdir,SubID);
        
    for r = 1:n_rest_names % to loop over rest_names
        curr_rest = rest_names{r};
        
        count_val = MRIcount{SubID, curr_rest};

        if count_val==0
            continue;
        end

        nscans = (count_val == 0.5) * 205 + (count_val == 1) * 310;
        
    
        % load data
        path = fullfile(SubDir, 'nifti', 'functional', curr_rest);
        n = dir(fullfile(path, 's6w2*.nii')); % data with 2mm voxel size, smoothed
        save_dir = fullfile(studydir, 'FuncConn_AAL', SubID, curr_rest); 
        
        save_name = fullfile(save_dir,'tc_filtered_2mm.mat');
        if exist(save_name,'file')  % skip if this file has existed
            continue;
        end
        
        fprintf('Extracting data from %s of %s\n',curr_rest,SubDir)
        
        data_4D = spm_read_vols(spm_vol(fullfile(path, n.name)));

        if size(data_4D, 4) ~= nscans
            error('Mismatch between expected nscans (%d) and actual (%d)', nscans, size(data_4D, 4));
        end

        dat = reshape(data_4D, [], nscans)';

        dat_gm = dat(:, gm_idx);
        wm_mean = mean(dat(:, wm_idx), 2);
        csf_mean = mean(dat(:, csf_idx), 2);
        gm_mean = mean(dat_gm, 2);
   
        % filter data
        drift = (1:nscans)';
        mreg = load(fullfile(studydir, 'NRegressor',SubID, sprintf('nuisance_regressors_%s.txt',curr_rest)));
        mreg = [mreg, gm_mean, wm_mean, csf_mean, drift];
        mreg = zscore(mreg);  % z-score all columns
mreg = [mreg, ones(nscans,1)];  % add intercept
        mreg = [zscore([mreg, gm_mean', wm_mean, csf_mean, [1:nscans]']), ones(nscans,1)]; % add mean(gm), mean(wm), mean(csf), drift, and constant
        
        b = mreg \ dat_gm;    % Equivalent to: (X'X)⁻¹ X'Y
        dat_gm = dat_gm - mreg * b;
        
        % save data
        if ~exist(save_dir,'dir')
            mkdir(save_dir)
        end
        save(save_name, 'dat_gm');   
        
    end % end of session loop
end

